// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  firstName       String
  lastName        String
  email           String

  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Organization {
  id        String @id @default(uuid())
  name      String

  users User[]
  projects Project[]
  comfortTags ComfortTag[]
  healthAndSafetyTags HealthAndSafetyTag[]
  goalTags GoalTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id               String @id @default(uuid())
  name             String
  homeownerName    String
  homeownerPhone   String
  homeownerEmail   String
  homeownerAddress String

  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])

  projectData       ProjectData?
  projectRooms      ProjectRoom[]
  insulation        ProjectInsulation[]
  airSealing        ProjectAirSealing[]
  hvac              HVAC[]
  waterHeaters      WaterHeater[]
  cooktops          Cooktop[]
  otherAppliances   OtherAppliance[]
  electricalPanels  ElectricalPanel[]
  solar             Solar[]
  batteries         Battery[]
  generators        Generator[]
  evChargers        EvCharger[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectData {
  id                      String @id @default(uuid())
  squareFootage           Int?
  roomCount               Int?
  bathroomCount           Int?
  bedroomCount            Int?
  stories                 Int?
  yearBuilt               Int?
  basementType            String?
  comfortIssueTags        String[] @default([])
  comfortIssueNotes       String?
  healthSafetyIssueTags   String[] @default([])
  healthSafetyIssueNotes  String?
  homeownerGoalsTags      String[] @default([])
  homeownerGoalsNotes     String?

  projectId  String    @unique
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectRoom {
  id                String @id @default(uuid())
  name              String?
  type              String?
  width             Int?
  length            Int?
  ceilingHeight     Int?
  floor             String?
  usage             String?
  comfortIssueTags String[] @default([])
  safetyIssueTags  String[] @default([])
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectInsulation {
  id                  String @id @default(uuid())
  name                String?
	insulationLocation  String?
	insulationCondition String?
	notes               String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectAirSealing {
  id                    String @id @default(uuid())
  name                  String?
	leakinessDescription  String?
	notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model HVAC {
  id                String @id @default(uuid())
  hvacSystemType    String?
  havcSystem        String?
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  heatingCapacity   Int?
  coolingCapacity   Int?
  location          String?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WaterHeater {
  id                String @id @default(uuid())
  systemType        String?
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  tankVolume        Int?
  location          String?
  notes             String?
  
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cooktop {
  id                String @id @default(uuid())
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  isInduction       Boolean?
  location          String?
  notes             String?
  
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OtherAppliance {
  id                String @id @default(uuid())
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  location          String?
  notes             String?
  type              String

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ElectricalPanel {
  id                    String @id @default(uuid())
  panelType             String?
  panelAmperageRating   String?
  availableNewCircuits  String?
  total15AmpCircuits    String?
  total20AmpCircuits    String?
  total30AmpCircuits    String?
  total40AmpCircuits    String?
  total50AmpCircuits    String?
  total60AmpCircuits    String?
  total70AmpCircuits    String?
  notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Solar {
  id                String @id @default(uuid())
  location          String?
  ownership         String?
  moduleType        String?
  tracking          String?
  arrayOrientation  String?
  arrayTilt         String?
  maxPowerOutput    String?
  numberOfPanels    Int?
  yearInstalled     Int?
  annualOutput      String?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Battery {
  id                String @id @default(uuid())
  totalCapacity     String?
  ratedPowerOutput  String?
  ratedPeakOutput   String?
  voltage           String?
  gridConnected     String?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EvCharger {
  id                    String @id @default(uuid())
  chargingLevel         String?
  amperage              String?
  acPowerSourceVolatge  String?
  maxChargingPower      String?
  manufacturer          String?
  modelNumber           String?
  serialNumber          String?
  notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Generator {
  id                      String @id @default(uuid())
  generatorType           String?
  fuelType                String?
  ratedContinuousWattage  String?
  ratedPeakWattage        String?
  voltage                 Int?
  numberOfPhases          Int?
  transferSwitch          String?
  connection              String?
  yearInstalled           Int?
  manufacturer            String?
  modelNumber             String?
  serialNumber            String?
  location                String?
  notes                   String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ComfortTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model HealthAndSafetyTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model GoalTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}