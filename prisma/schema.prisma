// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id               String @id @default(uuid())
  name             String
  homeownerName    String
  homeownerPhone   String
  homeownerEmail   String
  homeownerAddress String

  projectData      ProjectData[]
  projectEnvelopes ProjectEnvelope[]
  projectInsulation ProjectInsulation[]  
  ProjectAirSealing ProjectAirSealing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectData {
  id                      String @id @default(uuid())
  squareFootage           Int
  roomCount               Int
  bathroomCount           Int
  bedroomCount            Int
  stories                 Int
  yearBuilt               Int
  basementType            String
  comfortIssueTags        String
  comfortIssueNotes       String
  healthSafetyIssueTags   String[]
  healthSafetyIssueNotes  String
  homeownerGoalsTags      String[]
  homeownerGoalsNotes     String

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectEnvelope {
  id           String @id @default(uuid())
  envelopType  String

  projectId    String
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  insulation ProjectInsulation[]
  airSealing ProjectAirSealing[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectInsulation {
  id                   String @id @default(uuid())
  name                 String
  insulationLocation   String
  insulationCondition  String
  notes                String

  projectId String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  envelopeId    String
  projectEnvelope      ProjectEnvelope   @relation(fields: [envelopeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectAirSealing {
  id                    String @id @default(uuid())
  name                  String
  leakinessDescription  String
  notes                 String

  projectId String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  envelopeId            String
  projectEnvelope       ProjectEnvelope   @relation(fields: [envelopeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
