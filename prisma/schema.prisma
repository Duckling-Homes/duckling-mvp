// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  firstName       String
  lastName        String
  email           String @unique

  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@index([email], name: "email")
}

model Organization {
  id             String @id @default(uuid())
  name           String
  description    String?
  webpage        String?


  users User[]
  projects Project[]
  comfortTags ComfortTag[]
  healthAndSafetyTags HealthAndSafetyTag[]
  goalTags GoalTag[]
  productCatalogue ProductCatalogue[]
  financingOptions FinancingOption[]
  documents Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Project {
  id               String @id @default(uuid())
  name             String
  homeownerName    String
  homeownerPhone   String
  homeownerEmail   String
  homeownerAddress String

  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])

  heroImageId      String? @unique
  heroImage        Image? @relation(name: "HeroImageRelation", fields: [heroImageId], references: [id])

  projectData       ProjectData?
  projectRooms      ProjectRoom[]
  envelopeComponents ProjectEnvelopeComponent[]
  hvac              HVAC[]
  waterHeaters      WaterHeater[]
  cooktops          Cooktop[]
  otherAppliances   OtherAppliance[]
  electricalPanels  ElectricalPanel[]
  solar             Solar[]
  batteries         Battery[]
  generators        Generator[]
  evChargers        EvCharger[]
  relatedImages     Image[] @relation(name: "ProjectToImage")
  plans             Plan[] @relation(name: "ProjectToPlan")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


model ProjectData {
  id                      String @id @default(uuid())
  squareFootage           Int?
  roomCount               Int?
  bathroomCount           Int?
  bedroomCount            Int?
  stories                 Int?
  yearBuilt               Int?
  basementType            String?
  comfortIssueTags        String[] @default([])
  comfortIssueNotes       String?
  healthSafetyIssueTags   String[] @default([])
  healthSafetyIssueNotes  String?
  homeownerGoalsTags      String[] @default([])
  homeownerGoalsNotes     String?

  projectId  String    @unique
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectRoom {
  id                String @id @default(uuid())
  name              String?
  type              String?
  floor             String?
  comfortIssueTags String[] @default([])
  safetyIssueTags  String[] @default([])
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ProjectEnvelopeComponent {
  id                    String @id @default(uuid())
  type                  String
  name                  String?
	condition             String?
	location              String?
  insulationCondition   String?
  airSealingCondition   String?
	notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model HVAC {
  id                String @id @default(uuid())
  hvacSystemType    String?
  havcSystem        String?
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  heatingCapacity   Int?
  coolingCapacity   Int?
  location          String?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model WaterHeater {
  id                String @id @default(uuid())
  systemType        String?
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  tankVolume        Int?
  location          String?
  notes             String?
  
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cooktop {
  id                String @id @default(uuid())
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  isInduction       Boolean?
  location          String?
  notes             String?
  
  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model OtherAppliance {
  id                String @id @default(uuid())
  fuel              String?
  age               Int?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  location          String?
  notes             String?
  type              String

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ElectricalPanel {
  id                    String @id @default(uuid())
  panelType             String?
  panelAmperageRating   Int?
  availableNewCircuits  Int?
  total15AmpCircuits    Int?
  total20AmpCircuits    Int?
  total30AmpCircuits    Int?
  total40AmpCircuits    Int?
  total50AmpCircuits    Int?
  total60AmpCircuits    Int?
  total70AmpCircuits    Int?
  location              String?
  notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Solar {
  id                String @id @default(uuid())
  location          String?
  ownership         String?
  moduleType        String?
  tracking          String?
  arrayOrientation  String?
  arrayTilt         Int?
  maxPowerOutput    Int?
  numberOfPanels    Int?
  yearInstalled     Int?
  annualOutput      Int?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Battery {
  id                String @id @default(uuid())
  totalCapacity     Int?
  ratedPowerOutput  Int?
  ratedPeakOutput   Int?
  voltage           Int?
  gridConnected     String?
  manufacturer      String?
  modelNumber       String?
  serialNumber      String?
  notes             String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model EvCharger {
  id                    String @id @default(uuid())
  chargingLevel         String?
  amperage              Int?
  acPowerSourceVolatge  Int?
  maxChargingPower      Int?
  manufacturer          String?
  modelNumber           String?
  serialNumber          String?
  notes                 String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Generator {
  id                      String @id @default(uuid())
  generatorType           String?
  fuelType                String?
  ratedContinuousWattage  Int?
  ratedPeakWattage        Int?
  voltage                 Int?
  numberOfPhases          String?
  transferSwitch          String?
  connection              String?
  yearInstalled           Int?
  manufacturer            String?
  modelNumber             String?
  serialNumber            String?
  location                String?
  notes                   String?

  projectId  String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ComfortTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model HealthAndSafetyTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model GoalTag {
  name            String @unique
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Image {
  id                  String  @id @default(uuid())
  name                String?
  homeownerNotes      String?
  internalNotes       String?
  roomId              String?
  applianceId         String?
  electricalId        String?
  envelopeComponentId String?

  projectId           String
  project             Project @relation(name: "ProjectToImage", fields: [projectId], references: [id], onDelete: Cascade)
  projectHeroImage    Project? @relation(name: "HeroImageRelation")

  duplicatedFromId    String? 
  duplicatedFrom      Image?    @relation(name: "DuplicatedImageRelation", fields: [duplicatedFromId], references: [id])
  duplicates          Image[]   @relation(name: "DuplicatedImageRelation")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum Category {
  HomePerformance
  HVAC
  Appliances
  Electrical
  Other
}

enum CatalogEntryType {
  Equipment
  Service
  Other
}

enum PricingType {
  PerUnit
  ScaledPricing
}

model ProductCatalogue {
  id                   String          @id @default(uuid())
  category             Category 
  subcategory          String?
  name                 String
  description          String?
  type                 CatalogEntryType
  pricingType          PricingType     @default(PerUnit) // Set default to PerUnit
  scaledPricingMetric  String?
  basePricePer         Float
  brand                String?
  modelNumber          String?
  ahriNumber           String?         // Nullable, only relevant for HVAC equipment
  incentives           Incentive[]     @relation("ProductCatalogueToIncentive")

  organizationId       String
  organization         Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
}

enum RebateOrg {
  FederalGovernment
  BayREN
  IRA
  NYSERDA
  ConsumersEnergy
}

enum CalculationType {
  Percentage
  PerUnit
  FlatRate
}

enum IncentiveType {
  Rebate
  TaxCredit
}

model Incentive {
  id                   String          @id @default(uuid())

  name                 String
  rebateOrg            RebateOrg      
  type                 IncentiveType
  calculationType      CalculationType
  calculationRateValue Float           
  maxLimit             Float?          
  descriptionText      String
  criteria             String?
  notes                String?

  rebateOrganizationId String?
  rebateOrganization   RebateOrganization?  @relation(fields: [rebateOrganizationId], references: [id])   

  productCatalogues    ProductCatalogue[] @relation("ProductCatalogueToIncentive") // Updated relation 

  impactedByAggregationLimits AggregationLimit[] @relation("AggregationLimitToIncentive")     

  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt

}

model RebateOrganization {
  id                   String          @id @default(uuid())
  name                 String?

  incentives           Incentive[]
  
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
}


model Plan {
  id                   String          @id @default(uuid())
  name                 String?
  planDetails          Json?

  copy                 Json?        // { summary: '', recommended: '', comfort: '', health: ''}

  projectId            String
  project              Project @relation(name: "ProjectToPlan", fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
}



model FinancingOption {
  id                   String          @id @default(uuid())
  name                 String
  provider             String         // Do we need to make this a relation & introduce FinancingProvider?
  description          String?
  link                 String?

  minAPR               Float
  maxAPR               Float
  minAmount            Float
  maxAmount            Float
  termLengths          Int[]          // In months

  organizationId       String
  organization         Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
}

model AggregationLimit {
  id                  String            @id @default(uuid())
  limitName           String
  limitDescription    String?
  limitWarning        String
  limitAmount         Float
  impactedIncentives  Incentive[]       @relation("AggregationLimitToIncentive")

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt
}